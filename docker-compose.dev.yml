version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: neighbourhood_mysql_dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-devpassword}
      MYSQL_DATABASE: ${DB_NAME:-neighbourhood}
      MYSQL_USER: ${DB_USER:-neighbourhood_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-devpassword123}
    ports:
      - "3307:3306"  # Avoid conflicts with local MySQL
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - neighbourhood_dev_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: neighbourhood_backend_dev
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_USER=${DB_USER:-neighbourhood_user}
      - DB_PASSWORD=${DB_PASSWORD:-devpassword123}
      - DB_NAME=${DB_NAME:-neighbourhood}
      - API_USERNAME=${API_USERNAME:-}
      - API_PASSWORD=${API_PASSWORD:-}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
      - FLASK_ENV=development
      - FLASK_DEBUG=True
    ports:
      - "5000:5000"  # Avoid conflicts with local services
    volumes:
      - ./backend:/app
      - backend_cache:/app/__pycache__
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - neighbourhood_dev_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: neighbourhood_frontend_dev
    restart: unless-stopped
    environment:
      - VITE_API_URL=http://localhost:5000
    ports:
      - "3000:3000"  # Avoid conflicts with local services
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    depends_on:
      - backend
    networks:
      - neighbourhood_dev_network

volumes:
  mysql_dev_data:
  backend_cache:

networks:
  neighbourhood_dev_network:
    driver: bridge